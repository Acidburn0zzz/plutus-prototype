(program
  
  (module CraftOfFP
    (import Prelude)
    (export () ())
    
    
    
    
    
    (declare exOr (fun Prelude.bool
                    (fun Prelude.bool
                         Prelude.bool)))
    (define exOr (lam x (lam y
      [Prelude.and [Prelude.or x y] [Prelude.not [Prelude.and x y]]])))
    
    
    (declare exOr1 (fun Prelude.bool
                     (fun Prelude.bool
                          Prelude.bool)))
    (define exOr1 (lam x (lam y
      [(inst x Prelude.bool)
        (lam u [Prelude.not y])
        (lam u y)])))
    
    
    (declare prop_exOrs (fun Prelude.bool
                          (fun Prelude.bool
                               Prelude.bool)))
    (define prop_exOrs (lam x (lam y
      [Prelude.equalsBool [CraftOfFP.exOr x y] [CraftOfFP.exOr1 x y]])))
    
    
    (declare test_exOrs_1 (fun Prelude.unit Prelude.bool))
    (define test_exOrs_1 (lam x
      [CraftOfFP.prop_exOrs Prelude.true Prelude.true]))
    
    (declare test_exOrs_2 (fun Prelude.unit Prelude.bool))
    (define test_exOrs_2 (lam x
      [CraftOfFP.prop_exOrs Prelude.true Prelude.false]))
    
    (declare test_exOrs_3 (fun Prelude.unit Prelude.bool))
    (define test_exOrs_3 (lam x
      [CraftOfFP.prop_exOrs Prelude.false Prelude.true]))
    
    (declare test_exOrs_4 (fun Prelude.unit Prelude.bool))
    (define test_exOrs_4 (lam x
      [CraftOfFP.prop_exOrs Prelude.false Prelude.false]))
    
    
    
    
    
    
    (declare max (fun (integer)
                   (fun (integer)
                        (integer))))
    (define max (lam x (lam y
      [(inst [Prelude.greaterThanEqualsInteger x y] (integer))
        (lam u x)
        (lam u y)])))
    
    
    (declare prop_max1 (fun (integer)
                         (fun (integer)
                              Prelude.bool)))
    (define prop_max1 (lam x (lam y
      [Prelude.and
        [Prelude.lessThanEqualsInteger x [CraftOfFP.max x y]]
        [Prelude.lessThanEqualsInteger y [CraftOfFP.max x y]]])))
    
    
    (declare prop_max2 (fun (integer)
                         (fun (integer)
                              Prelude.bool)))
    (define prop_max2 (lam x (lam y
      [Prelude.or
        [Prelude.equalsInteger x [CraftOfFP.max x y]]
        [Prelude.equalsInteger y [CraftOfFP.max x y]]])))
    
    
    (declare prop_max3 (fun (integer)
                         (fun (integer)
                              Prelude.bool)))
    (define prop_max3 (lam x (lam y
      [Prelude.or
        [Prelude.equalsInteger x [CraftOfFP.max x y]]
        [Prelude.equalsInteger y [CraftOfFP.max x y]]])))
    
    
    (declare test_max1_1 (fun Prelude.unit Prelude.bool))
    (define test_max1_1 (lam x
      [CraftOfFP.prop_max1 0 0]))
    
    (declare test_max1_2 (fun Prelude.unit Prelude.bool))
    (define test_max1_2 (lam x
      [CraftOfFP.prop_max1 0 13]))
    
    (declare test_max1_3 (fun Prelude.unit Prelude.bool))
    (define test_max1_3 (lam x
      [CraftOfFP.prop_max1 0 42]))
    
    (declare test_max1_4 (fun Prelude.unit Prelude.bool))
    (define test_max1_4 (lam x
      [CraftOfFP.prop_max1 13 0]))
    
    (declare test_max1_5 (fun Prelude.unit Prelude.bool))
    (define test_max1_5 (lam x
      [CraftOfFP.prop_max1 13 13]))
    
    (declare test_max1_6 (fun Prelude.unit Prelude.bool))
    (define test_max1_6 (lam x
      [CraftOfFP.prop_max1 13 42]))
    
    (declare test_max1_7 (fun Prelude.unit Prelude.bool))
    (define test_max1_7 (lam x
      [CraftOfFP.prop_max1 42 0]))
    
    (declare test_max1_8 (fun Prelude.unit Prelude.bool))
    (define test_max1_8 (lam x
      [CraftOfFP.prop_max1 42 13]))
    
    (declare test_max1_9 (fun Prelude.unit Prelude.bool))
    (define test_max1_9 (lam x
      [CraftOfFP.prop_max1 42 42]))
    
    
    (declare test_max2_1 (fun Prelude.unit Prelude.bool))
    (define test_max2_1 (lam x
      [CraftOfFP.prop_max2 0 0]))
    
    (declare test_max2_2 (fun Prelude.unit Prelude.bool))
    (define test_max2_2 (lam x
      [CraftOfFP.prop_max2 0 13]))
    
    (declare test_max2_3 (fun Prelude.unit Prelude.bool))
    (define test_max2_3 (lam x
      [CraftOfFP.prop_max2 0 42]))
    
    (declare test_max2_4 (fun Prelude.unit Prelude.bool))
    (define test_max2_4 (lam x
      [CraftOfFP.prop_max2 13 0]))
    
    (declare test_max2_5 (fun Prelude.unit Prelude.bool))
    (define test_max2_5 (lam x
      [CraftOfFP.prop_max2 13 13]))
    
    (declare test_max2_6 (fun Prelude.unit Prelude.bool))
    (define test_max2_6 (lam x
      [CraftOfFP.prop_max2 13 42]))
    
    (declare test_max2_7 (fun Prelude.unit Prelude.bool))
    (define test_max2_7 (lam x
      [CraftOfFP.prop_max2 42 0]))
    
    (declare test_max2_8 (fun Prelude.unit Prelude.bool))
    (define test_max2_8 (lam x
      [CraftOfFP.prop_max2 42 13]))
    
    (declare test_max2_9 (fun Prelude.unit Prelude.bool))
    (define test_max2_9 (lam x
      [CraftOfFP.prop_max2 42 42]))
    
    
     (declare test_max3_1 (fun Prelude.unit Prelude.bool))
    (define test_max3_1 (lam x
      [CraftOfFP.prop_max3 0 0]))
    
    (declare test_max3_2 (fun Prelude.unit Prelude.bool))
    (define test_max3_2 (lam x
      [CraftOfFP.prop_max3 0 13]))
    
    (declare test_max3_3 (fun Prelude.unit Prelude.bool))
    (define test_max3_3 (lam x
      [CraftOfFP.prop_max3 0 42]))
    
    (declare test_max3_4 (fun Prelude.unit Prelude.bool))
    (define test_max3_4 (lam x
      [CraftOfFP.prop_max3 13 0]))
    
    (declare test_max3_5 (fun Prelude.unit Prelude.bool))
    (define test_max3_5 (lam x
      [CraftOfFP.prop_max3 13 13]))
    
    (declare test_max3_6 (fun Prelude.unit Prelude.bool))
    (define test_max3_6 (lam x
      [CraftOfFP.prop_max3 13 42]))
    
    (declare test_max3_7 (fun Prelude.unit Prelude.bool))
    (define test_max3_7 (lam x
      [CraftOfFP.prop_max3 42 0]))
    
    (declare test_max3_8 (fun Prelude.unit Prelude.bool))
    (define test_max3_8 (lam x
      [CraftOfFP.prop_max3 42 13]))
    
    (declare test_max3_9 (fun Prelude.unit Prelude.bool))
    (define test_max3_9 (lam x
      [CraftOfFP.prop_max3 42 42]))
    
    
    
    
    
    (declare between
      (fun (integer)
        (fun (integer)
          (fun (integer)
               Prelude.bool))))
    (define between (lam x (lam y (lam z
      [Prelude.or
        [Prelude.and
          [Prelude.lessThanEqualsInteger x y]
          [Prelude.lessThanEqualsInteger y z]]
        [Prelude.and
          [Prelude.greaterThanEqualsInteger x y]
          [Prelude.greaterThanEqualsInteger y z]]]))))
    
    
    (declare test_between1
      (fun Prelude.unit Prelude.bool))
    (define test_between1 (lam x
      [Prelude.equalsBool
        [CraftOfFP.between 2 3 4]
        Prelude.true]))
    
    
    
    
    
    (declare fact (fun (integer) (integer)))
    (define fact (lam n
      [(inst [Prelude.greaterThanInteger n 1] (integer))
        (lam u
          [Prelude.multiplyInteger
            n
            [CraftOfFP.fact [Prelude.subtractInteger n 1]]])
        (lam u 1)]))
    
    
    (declare prop_fact (fun (integer) Prelude.bool))
    (define prop_fact (lam n
      [Prelude.greaterThanInteger [CraftOfFP.fact n] 0]))
    
    
    (declare test_fact_1 (fun Prelude.unit Prelude.bool))
    (define test_fact_1 (lam x
      [CraftOfFP.prop_fact 0]))
    
    (declare test_fact_2 (fun Prelude.unit Prelude.bool))
    (define test_fact_2 (lam x
      [CraftOfFP.prop_fact 13]))
    
    (declare test_fact_3 (fun Prelude.unit Prelude.bool))
    (define test_fact_3 (lam x
      [CraftOfFP.prop_fact 42]))
    
    
    
    
    
    
    
    (type move
      (forall r (type)
        (fun (fun Prelude.unit r)
          (fun (fun Prelude.unit r)
            (fun (fun Prelude.unit r)
                 r)))))
    
    (declare rock CraftOfFP.move)
    (define rock
      (abs r (lam rk (lam p (lam s [rk Prelude.mkUnit])))))
    
    (declare paper CraftOfFP.move)
    (define paper
      (abs r (lam rk (lam p (lam s [p Prelude.mkUnit])))))
  
    (declare scissors CraftOfFP.move)
    (define scissors
      (abs r (lam rk (lam p (lam s [s Prelude.mkUnit])))))
    
    (declare caseMove
      (forall r (type)
        (fun CraftOfFP.move
          (fun (fun Prelude.unit r)
            (fun (fun Prelude.unit r)
              (fun (fun Prelude.unit r)
                   r))))))
    (define caseMove
      (abs r (lam m (inst m r)))) 
    
    
    (declare equalsMove (fun CraftOfFP.move
                          (fun CraftOfFP.move
                               Prelude.bool)))
    (define equalsMove (lam m1 (lam m2
      [(inst CraftOfFP.caseMove Prelude.bool) m1
        (lam u
          [(inst CraftOfFP.caseMove Prelude.bool) m2
            (lam u Prelude.true)
            (lam u Prelude.false)
            (lam u Prelude.false)])
        (lam u
          [(inst CraftOfFP.caseMove Prelude.bool) m2
            (lam u Prelude.false)
            (lam u Prelude.true)
            (lam u Prelude.false)])
        (lam u
          [(inst CraftOfFP.caseMove Prelude.bool) m2
            (lam u Prelude.false)
            (lam u Prelude.false)
            (lam u Prelude.true)])])))
    
    
    (declare beat (fun CraftOfFP.move CraftOfFP.move))
    (define beat (lam m
      [(inst CraftOfFP.caseMove CraftOfFP.move) m
        (lam u CraftOfFP.scissors)
        (lam u CraftOfFP.rock)
        (lam u CraftOfFP.paper)]))
    
    
    (declare lose (fun CraftOfFP.move CraftOfFP.move))
    (define lose (lam m
      [(inst CraftOfFP.caseMove CraftOfFP.move) m
        (lam u CraftOfFP.paper)
        (lam u CraftOfFP.scissors)
        (lam u CraftOfFP.rock)]))
    
    
    (declare prop_WinLose (fun CraftOfFP.move Prelude.bool))
    (define prop_WinLose (lam m
      [Prelude.and
        [Prelude.not [CraftOfFP.equalsMove [CraftOfFP.beat m]
                                           [CraftOfFP.lose m]]]
        [Prelude.and
          [Prelude.not [CraftOfFP.equalsMove [CraftOfFP.beat m] m]]
          [Prelude.not [CraftOfFP.equalsMove [CraftOfFP.lose m] m]]]]))
    
    
    (declare test_WinLose_1 (fun Prelude.unit Prelude.bool))
    (define test_WinLose_1 (lam x
      [CraftOfFP.prop_WinLose CraftOfFP.rock]))
    
    (declare test_WinLose_2 (fun Prelude.unit Prelude.bool))
    (define test_WinLose_2 (lam x
      [CraftOfFP.prop_WinLose CraftOfFP.paper]))
    
    (declare test_WinLose_3 (fun Prelude.unit Prelude.bool))
    (define test_WinLose_3 (lam x
      [CraftOfFP.prop_WinLose CraftOfFP.scissors]))
      
    
    
    
    
    
    
    (declare mysteryMax (fun (integer)
                          (fun (integer)
                            (fun (integer)
                                 (integer)))))
    (define mysteryMax (lam x (lam y (lam z
      [(inst [Prelude.and [Prelude.greaterThanEqualsInteger x y]
                          [Prelude.greaterThanEqualsInteger x z]]
             (integer))
         (lam u x)
         (lam u
           [(inst [Prelude.and [Prelude.greaterThanEqualsInteger y x]
                               [Prelude.greaterThanEqualsInteger y z]]
                  (integer))
             (lam u' y)
             (lam u' z)])]))))
    
    
    (declare prop_mystery (fun (integer)
                            (fun (integer)
                              (fun (integer)
                                   Prelude.bool))))
    (define prop_mystery (lam x (lam y (lam z
      [Prelude.equalsInteger
        [CraftOfFP.mysteryMax x y z]
        [Prelude.maxInteger [Prelude.maxInteger x y] z]]))))
    
    
    (declare test_mystery_1 (fun Prelude.unit Prelude.bool))
    (define test_mystery_1 (lam x
      [CraftOfFP.prop_mystery 0 0 0]))
    
    (declare test_mystery_2 (fun Prelude.unit Prelude.bool))
    (define test_mystery_2 (lam x
      [CraftOfFP.prop_mystery 0 0 13]))
    
    (declare test_mystery_3 (fun Prelude.unit Prelude.bool))
    (define test_mystery_3 (lam x
      [CraftOfFP.prop_mystery 0 0 42]))
    
    (declare test_mystery_4 (fun Prelude.unit Prelude.bool))
    (define test_mystery_4 (lam x
      [CraftOfFP.prop_mystery 0 13 0]))
    
    (declare test_mystery_5 (fun Prelude.unit Prelude.bool))
    (define test_mystery_5 (lam x
      [CraftOfFP.prop_mystery 0 13 13]))
    
    (declare test_mystery_6 (fun Prelude.unit Prelude.bool))
    (define test_mystery_6 (lam x
      [CraftOfFP.prop_mystery 0 13 42]))
    
    (declare test_mystery_7 (fun Prelude.unit Prelude.bool))
    (define test_mystery_7 (lam x
      [CraftOfFP.prop_mystery 0 42 0]))
    
    (declare test_mystery_8 (fun Prelude.unit Prelude.bool))
    (define test_mystery_8 (lam x
      [CraftOfFP.prop_mystery 0 42 13]))
    
    (declare test_mystery_9 (fun Prelude.unit Prelude.bool))
    (define test_mystery_9 (lam x
      [CraftOfFP.prop_mystery 0 42 42]))
    
    
    (declare test_mystery_10 (fun Prelude.unit Prelude.bool))
    (define test_mystery_10 (lam x
      [CraftOfFP.prop_mystery 13 0 0]))
    
    (declare test_mystery_11 (fun Prelude.unit Prelude.bool))
    (define test_mystery_11 (lam x
      [CraftOfFP.prop_mystery 13 0 13]))
    
    (declare test_mystery_12 (fun Prelude.unit Prelude.bool))
    (define test_mystery_12 (lam x
      [CraftOfFP.prop_mystery 13 0 42]))
    
    (declare test_mystery_13 (fun Prelude.unit Prelude.bool))
    (define test_mystery_13 (lam x
      [CraftOfFP.prop_mystery 13 13 0]))
    
    (declare test_mystery_14 (fun Prelude.unit Prelude.bool))
    (define test_mystery_14 (lam x
      [CraftOfFP.prop_mystery 13 13 13]))
    
    (declare test_mystery_15 (fun Prelude.unit Prelude.bool))
    (define test_mystery_15 (lam x
      [CraftOfFP.prop_mystery 13 13 42]))
    
    (declare test_mystery_16 (fun Prelude.unit Prelude.bool))
    (define test_mystery_16 (lam x
      [CraftOfFP.prop_mystery 13 42 0]))
    
    (declare test_mystery_17 (fun Prelude.unit Prelude.bool))
    (define test_mystery_17 (lam x
      [CraftOfFP.prop_mystery 13 42 13]))
    
    (declare test_mystery_18 (fun Prelude.unit Prelude.bool))
    (define test_mystery_18 (lam x
      [CraftOfFP.prop_mystery 13 42 42]))
    
    
    (declare test_mystery_19 (fun Prelude.unit Prelude.bool))
    (define test_mystery_19 (lam x
      [CraftOfFP.prop_mystery 42 0 0]))
    
    (declare test_mystery_20 (fun Prelude.unit Prelude.bool))
    (define test_mystery_20 (lam x
      [CraftOfFP.prop_mystery 42 0 13]))
    
    (declare test_mystery_21 (fun Prelude.unit Prelude.bool))
    (define test_mystery_21 (lam x
      [CraftOfFP.prop_mystery 42 0 42]))
    
    (declare test_mystery_22 (fun Prelude.unit Prelude.bool))
    (define test_mystery_22 (lam x
      [CraftOfFP.prop_mystery 42 13 0]))
    
    (declare test_mystery_23 (fun Prelude.unit Prelude.bool))
    (define test_mystery_23 (lam x
      [CraftOfFP.prop_mystery 42 13 13]))
    
    (declare test_mystery_24 (fun Prelude.unit Prelude.bool))
    (define test_mystery_24 (lam x
      [CraftOfFP.prop_mystery 42 13 42]))
    
    (declare test_mystery_25 (fun Prelude.unit Prelude.bool))
    (define test_mystery_25 (lam x
      [CraftOfFP.prop_mystery 42 42 0]))
    
    (declare test_mystery_26 (fun Prelude.unit Prelude.bool))
    (define test_mystery_26 (lam x
      [CraftOfFP.prop_mystery 42 42 13]))
    
    (declare test_mystery_27 (fun Prelude.unit Prelude.bool))
    (define test_mystery_27 (lam x
      [CraftOfFP.prop_mystery 42 42 42]))
    
    
    
    
    
    
    (declare doubleAll (fun [Prelude.list (integer)]
                            [Prelude.list (integer)]))
    (define doubleAll (lam xs (case xs (Prelude.MkListWrapper (xscase)
      [(inst xscase [Prelude.list (integer)])
        (lam u (inst Prelude.nil (integer)))
        (lam x (lam xs'
          [(inst Prelude.cons (integer))
            [Prelude.multiplyInteger 2 x]
            [CraftOfFP.doubleAll xs']]))]))))
    
    
    (declare prop_sumDoubleAll (fun [Prelude.list (integer)]
                                    Prelude.bool))
    (define prop_sumDoubleAll (lam xs
      [Prelude.equalsInteger
        [Prelude.sumInteger [CraftOfFP.doubleAll xs]]
        [Prelude.multiplyInteger 2 [Prelude.sumInteger xs]]]))
    
    
    (declare test_sumDoubleAll_1 (fun Prelude.unit Prelude.bool))
    (define test_sumDoubleAll_1 (lam x
      [CraftOfFP.prop_sumDoubleAll
        (inst Prelude.nil (integer))]))
    
    (declare test_sumDoubleAll_2 (fun Prelude.unit Prelude.bool))
    (define test_sumDoubleAll_2 (lam x
      [CraftOfFP.prop_sumDoubleAll
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
    
    (declare prop_lengthPlusPlus
      (fun [Prelude.list (integer)]
        (fun [Prelude.list (integer)]
             Prelude.bool)))
    (define prop_lengthPlusPlus (lam xs (lam ys
      [Prelude.equalsInteger
        [(inst Prelude.length (integer))
          [(inst Prelude.append (integer)) xs ys]]
        [Prelude.addInteger
          [(inst Prelude.length (integer)) xs]
          [(inst Prelude.length (integer)) ys]]])))
    
    
    (declare test_lengthPlusPlus_1
      (fun Prelude.unit Prelude.bool))
    (define test_lengthPlusPlus_1 (lam x
      [CraftOfFP.prop_lengthPlusPlus
        (inst Prelude.nil (integer))
        (inst Prelude.nil (integer))]))
    
    (declare test_lengthPlusPlus_2
      (fun Prelude.unit Prelude.bool))
    (define test_lengthPlusPlus_2 (lam x
      [CraftOfFP.prop_lengthPlusPlus
        (inst Prelude.nil (integer))
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
    (declare test_lengthPlusPlus_3
      (fun Prelude.unit Prelude.bool))
    (define test_lengthPlusPlus_3 (lam x
      [CraftOfFP.prop_lengthPlusPlus
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]
        (inst Prelude.nil (integer))]))
    
    (declare test_lengthPlusPlus_4
      (fun Prelude.unit Prelude.bool))
    (define test_lengthPlusPlus_4 (lam x
      [CraftOfFP.prop_lengthPlusPlus
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
    
     
    (declare prop_reversePlusPlus
      (fun [Prelude.list (integer)]
        (fun [Prelude.list (integer)]
             Prelude.bool)))
    (define prop_reversePlusPlus (lam xs (lam ys
      [(inst Prelude.equalsList (integer)) Prelude.equalsInteger
        [(inst Prelude.reverse (integer))
          [(inst Prelude.append (integer)) xs ys]]
        [(inst Prelude.append (integer))
          [(inst Prelude.reverse (integer)) ys]
          [(inst Prelude.reverse (integer)) xs]]])))
    
    
    (declare test_reversePlusPlus_1
      (fun Prelude.unit Prelude.bool))
    (define test_reversePlusPlus_1 (lam x
      [CraftOfFP.prop_reversePlusPlus
        (inst Prelude.nil (integer))
        (inst Prelude.nil (integer))]))
    
    (declare test_reversePlusPlus_2
      (fun Prelude.unit Prelude.bool))
    (define test_reversePlusPlus_2 (lam x
      [CraftOfFP.prop_reversePlusPlus
        (inst Prelude.nil (integer))
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
    (declare test_reversePlusPlus_3
      (fun Prelude.unit Prelude.bool))
    (define test_reversePlusPlus_3 (lam x
      [CraftOfFP.prop_reversePlusPlus
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]
        (inst Prelude.nil (integer))]))
    
    (declare test_reversePlusPlus_4
      (fun Prelude.unit Prelude.bool))
    (define test_reversePlusPlus_4 (lam x
      [CraftOfFP.prop_reversePlusPlus
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
    
    (declare prop_assocPlusPlus
      (fun [Prelude.list (integer)]
        (fun [Prelude.list (integer)]
          (fun [Prelude.list (integer)]
               Prelude.bool))))
    (define prop_assocPlusPlus (lam xs (lam ys (lam zs
      [(inst Prelude.equalsList (integer)) Prelude.equalsInteger
        [(inst Prelude.append (integer))
           [(inst Prelude.append (integer)) xs ys]
           zs]
        [(inst Prelude.append (integer))
          xs
          [(inst Prelude.append (integer)) ys zs]]]))))
    
    
    (declare test_assocPlusPlus_1
      (fun Prelude.unit Prelude.bool))
    (define test_assocPlusPlus_1 (lam x
      [CraftOfFP.prop_assocPlusPlus
        (inst Prelude.nil (integer))
        (inst Prelude.nil (integer))
        (inst Prelude.nil (integer))]))
    
    (declare test_assocPlusPlus_2
      (fun Prelude.unit Prelude.bool))
    (define test_assocPlusPlus_2 (lam x
      [CraftOfFP.prop_assocPlusPlus
        (inst Prelude.nil (integer))
        (inst Prelude.nil (integer))
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
    (declare test_assocPlusPlus_3
      (fun Prelude.unit Prelude.bool))
    (define test_assocPlusPlus_3 (lam x
      [CraftOfFP.prop_assocPlusPlus
        (inst Prelude.nil (integer))
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]
        (inst Prelude.nil (integer))]))
    
    (declare test_assocPlusPlus_4
      (fun Prelude.unit Prelude.bool))
    (define test_assocPlusPlus_4 (lam x
      [CraftOfFP.prop_assocPlusPlus
        (inst Prelude.nil (integer))
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
    (declare test_assocPlusPlus_5
      (fun Prelude.unit Prelude.bool))
    (define test_assocPlusPlus_5 (lam x
      [CraftOfFP.prop_assocPlusPlus
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]
        (inst Prelude.nil (integer))
        (inst Prelude.nil (integer))]))
    
    (declare test_assocPlusPlus_6
      (fun Prelude.unit Prelude.bool))
    (define test_assocPlusPlus_6 (lam x
      [CraftOfFP.prop_assocPlusPlus
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]
        (inst Prelude.nil (integer))
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
    (declare test_assocPlusPlus_7
      (fun Prelude.unit Prelude.bool))
    (define test_assocPlusPlus_7 (lam x
      [CraftOfFP.prop_assocPlusPlus
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]
        (inst Prelude.nil (integer))]))
    
    (declare test_assocPlusPlus_8
      (fun Prelude.unit Prelude.bool))
    (define test_assocPlusPlus_8 (lam x
      [CraftOfFP.prop_assocPlusPlus
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
    
    (declare shunt (fun [Prelude.list (integer)]
                     (fun [Prelude.list (integer)]
                          [Prelude.list (integer)])))
    (define shunt (lam xs (lam ys (case xs (Prelude.MkListWrapper (xscase)
      [(inst xscase [Prelude.list (integer)])
        (lam u ys)
        (lam x (lam xs'
          [CraftOfFP.shunt xs' [(inst Prelude.cons (integer)) x ys]]))])))))
    
    
    (declare prop_shunt (fun [Prelude.list (integer)]
                          (fun [Prelude.list (integer)]
                               Prelude.bool)))
    (define prop_shunt (lam xs (lam ys
      [(inst Prelude.equalsList (integer)) Prelude.equalsInteger
        [CraftOfFP.shunt
          [CraftOfFP.shunt xs ys]
          (inst Prelude.nil (integer))]
        [CraftOfFP.shunt
          ys
          xs]])))
    
    
    (declare test_shunt_1 (fun Prelude.unit Prelude.bool))
    (define test_shunt_1 (lam x
      [CraftOfFP.prop_shunt
        (inst Prelude.nil (integer))
        (inst Prelude.nil (integer))]))
    
    (declare test_shunt_2 (fun Prelude.unit Prelude.bool))
    (define test_shunt_2 (lam x
      [CraftOfFP.prop_shunt
        (inst Prelude.nil (integer))
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
    (declare test_shunt_3 (fun Prelude.unit Prelude.bool))
    (define test_shunt_3 (lam x
      [CraftOfFP.prop_shunt
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]
        (inst Prelude.nil (integer))]))
    
    (declare test_shunt_4 (fun Prelude.unit Prelude.bool))
    (define test_shunt_4 (lam x
      [CraftOfFP.prop_shunt
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
    
    (declare reverse (fun [Prelude.list (integer)]
                          [Prelude.list (integer)]))
    (define reverse (lam xs (case xs (Prelude.MkListWrapper (xscase)
      [(inst xscase [Prelude.list (integer)])
        (lam u (inst Prelude.nil (integer)))
        (lam x (lam xs'
          [(inst Prelude.append (integer))
            [CraftOfFP.reverse xs']
            [(inst Prelude.cons (integer)) x (inst Prelude.nil (integer))]]))]))))
    
    
    (declare rev (fun [Prelude.list (integer)]
                      [Prelude.list (integer)]))
    (define rev (lam xs
      [CraftOfFP.shunt xs (inst Prelude.nil (integer))]))
    
    
    (declare prop_reverse (fun [Prelude.list (integer)]
                               Prelude.bool))
    (define prop_reverse (lam xs
      [(inst Prelude.equalsList (integer)) Prelude.equalsInteger
        [CraftOfFP.reverse xs]
        [CraftOfFP.rev xs]]))
    
    
    (declare test_reverse_1 (fun Prelude.unit Prelude.bool))
    (define test_reverse_1 (lam x
      [CraftOfFP.prop_reverse
        (inst Prelude.nil (integer))]))
    
    (declare test_reverse_2 (fun Prelude.unit Prelude.bool))
    (define test_reverse_2 (lam x
      [CraftOfFP.prop_reverse
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
    
    
    
    
    
    
    (declare factAux (fun (integer) (fun (integer) (integer))))
    (define factAux (lam n (lam p
      [(inst [Prelude.equalsInteger n 0] (integer))
        (lam u p)
        (lam u
          [CraftOfFP.factAux [Prelude.subtractInteger n 1]
                             [Prelude.multiplyInteger n p]])])))
    
    
    (declare fact2 (fun (integer) (integer)))
    (define fact2 (lam n [CraftOfFP.factAux n 1]))
    
    
    (declare prop_fact2 (fun (integer) Prelude.bool))
    (define prop_fact2 (lam n
      [Prelude.equalsInteger
        [CraftOfFP.fact n]
        [CraftOfFP.fact2 n]]))
    
    
    (declare test_fact2_1 (fun Prelude.unit Prelude.bool))
    (define test_fact2_1 (lam x
      [CraftOfFP.prop_fact2 0]))
    
    (declare test_fact2_2 (fun Prelude.unit Prelude.bool))
    (define test_fact2_2 (lam x
      [CraftOfFP.prop_fact2 13]))
    
    (declare test_fact2_3 (fun Prelude.unit Prelude.bool))
    (define test_fact2_3 (lam x
      [CraftOfFP.prop_fact2 42]))
    
    
    
    
    
    (declare prop_zip
      (fun [Prelude.list [Prelude.pair (integer) (integer)]]
           Prelude.bool))
    (define prop_zip (lam xs
      [(inst Prelude.equalsList [Prelude.pair (integer) (integer)])
        [(inst (inst Prelude.equalsPair (integer)) (integer))
          Prelude.equalsInteger
          Prelude.equalsInteger]
        [(inst (inst (inst Prelude.uncurry [Prelude.list (integer)])
                     [Prelude.list (integer)])
               [Prelude.list [Prelude.pair (integer) (integer)]])
          (inst (inst Prelude.zip (integer)) (integer))
          [(inst (inst Prelude.unzip (integer)) (integer))
            xs]]
        xs]))
    
    
    (declare prop_mf
      (fun (fun (integer) Prelude.bool)
        (fun (fun (integer) (integer))
          (fun [Prelude.list (integer)]
               Prelude.bool))))
    (define prop_mf (lam p (lam f (lam xs
      [(inst Prelude.equalsList (integer))
        Prelude.equalsInteger
        [(inst Prelude.filter (integer))
          p
          [(inst (inst Prelude.map (integer)) (integer))
            f
            xs]]
        [(inst (inst Prelude.map (integer)) (integer))
          f
          [(inst Prelude.filter (integer))
            (lam xs' [p [f xs']])
            xs]]]))))
    
    
    (declare test_zip_1 (fun Prelude.unit Prelude.bool))
    (define test_zip_1 (lam x
      [CraftOfFP.prop_zip (inst Prelude.nil [Prelude.pair (integer) (integer)])]))
    
    (declare test_zip_2 (fun Prelude.unit Prelude.bool))
    (define test_zip_2 (lam x
      [CraftOfFP.prop_zip
        [(inst Prelude.cons [Prelude.pair (integer) (integer)]) [(inst (inst Prelude.mkPair (integer)) (integer)) 0 1]
          [(inst Prelude.cons [Prelude.pair (integer) (integer)]) [(inst (inst Prelude.mkPair (integer)) (integer)) 3 4]
            [(inst Prelude.cons [Prelude.pair (integer) (integer)]) [(inst (inst Prelude.mkPair (integer)) (integer)) 5 6]
              (inst Prelude.nil [Prelude.pair (integer) (integer)])]]]]))
    
    (declare even (fun (integer) Prelude.bool))
    (declare odd (fun (integer) Prelude.bool))
    
    (define even (lam n
      [(inst [Prelude.equalsInteger n 0] Prelude.bool)
        (lam u Prelude.true)
        (lam u
          [CraftOfFP.odd [Prelude.subtractInteger n 1]])]))
    
    (define odd (lam n
      [(inst [Prelude.equalsInteger n 0] Prelude.bool)
        (lam u Prelude.false)
        (lam u
          [CraftOfFP.even [Prelude.subtractInteger n 1]])]))
    
    (declare test_mf_1 (fun Prelude.unit Prelude.bool))
    (define test_mf_1 (lam x
      [CraftOfFP.prop_mf
        CraftOfFP.even
        [Prelude.addInteger 2]
        (inst Prelude.nil (integer))]))
    
    (declare test_mf_2 (fun Prelude.unit Prelude.bool))
    (define test_mf_2 (lam x
      [CraftOfFP.prop_mf
        CraftOfFP.even
        [Prelude.addInteger 2]
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
        (declare test_mf_3 (fun Prelude.unit Prelude.bool))
    (define test_mf_3 (lam x
      [CraftOfFP.prop_mf
        CraftOfFP.even
        [Prelude.multiplyInteger 2]
        (inst Prelude.nil (integer))]))
    
    (declare test_mf_4 (fun Prelude.unit Prelude.bool))
    (define test_mf_4 (lam x
      [CraftOfFP.prop_mf
        CraftOfFP.even
        [Prelude.multiplyInteger 2]
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
    (declare test_mf_5 (fun Prelude.unit Prelude.bool))
    (define test_mf_5 (lam x
      [CraftOfFP.prop_mf
        CraftOfFP.odd
        [Prelude.addInteger 2]
        (inst Prelude.nil (integer))]))
    
    (declare test_mf_6 (fun Prelude.unit Prelude.bool))
    (define test_mf_6 (lam x
      [CraftOfFP.prop_mf
        CraftOfFP.odd
        [Prelude.addInteger 2]
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
        (declare test_mf_7 (fun Prelude.unit Prelude.bool))
    (define test_mf_7 (lam x
      [CraftOfFP.prop_mf
        CraftOfFP.odd
        [Prelude.multiplyInteger 2]
        (inst Prelude.nil (integer))]))
    
    (declare test_mf_8 (fun Prelude.unit Prelude.bool))
    (define test_mf_8 (lam x
      [CraftOfFP.prop_mf
        CraftOfFP.odd
        [Prelude.multiplyInteger 2]
        [(inst Prelude.cons (integer)) 0
          [(inst Prelude.cons (integer)) 13
            [(inst Prelude.cons (integer)) 42
              (inst Prelude.nil (integer))]]]]))
    
    
    
    
    
    
    (data TreeWrapper ((a (type)))
      (MkTreeWrapper
        (forall r (type)
          (fun (fun Prelude.unit r)
            (fun (fun a (fun (con CraftOfFP.TreeWrapper a) (fun (con CraftOfFP.TreeWrapper a) r)))
                 r)))))
    
    
    (type tree (lam a (type) (con CraftOfFP.TreeWrapper a)))
    
    
    (declare nil
      (forall a (type) [CraftOfFP.tree a]))
    (define nil
      (abs a
        (con CraftOfFP.MkTreeWrapper
          (abs r (lam n (lam b [n Prelude.mkUnit]))))))
    
    
    (declare node
      (forall a (type)
        (fun a
          (fun [CraftOfFP.tree a]
            (fun [CraftOfFP.tree a]
                 [CraftOfFP.tree a])))))
    (define node
      (abs a (lam x (lam l (lam rt
        (con CraftOfFP.MkTreeWrapper
          (abs r (lam n (lam b [b x l rt])))))))))
    
    
    (declare caseTree
      (forall a (type)
        (forall r (type)
          (fun [CraftOfFP.tree a]
            (fun (fun Prelude.unit r)
              (fun (fun a (fun (con CraftOfFP.TreeWrapper a) (fun (con CraftOfFP.TreeWrapper a) r)))
                   r))))))
    (define caseTree
      (abs a (abs r (lam t
        (case t
          (CraftOfFP.MkTreeWrapper (k) (inst k r)))))))
    
    
    (declare collapse
      (forall a (type)
        (fun [CraftOfFP.tree a]
             [Prelude.list a])))
    (define collapse (abs a (lam t
      [(inst (inst CraftOfFP.caseTree a) [Prelude.list a]) t
        (lam u (inst Prelude.nil a))
        (lam x (lam l (lam r
          [(inst Prelude.cons a) x
            [(inst Prelude.append a)
              [(inst CraftOfFP.collapse a) l]
              [(inst CraftOfFP.collapse a) r]]])))])))
    
    
    (declare mapTree
      (forall a (type)
        (forall b (type)
          (fun (fun a b)
            (fun [CraftOfFP.tree a]
                 [CraftOfFP.tree b])))))
    (define mapTree (abs a (abs b (lam f (lam t
      [(inst (inst CraftOfFP.caseTree a) [CraftOfFP.tree b]) t
        (lam u (inst CraftOfFP.nil b))
        (lam x (lam l (lam r
          [(inst CraftOfFP.node b)
            [f x]
            [(inst (inst CraftOfFP.mapTree a) b) f l]
            [(inst (inst CraftOfFP.mapTree a) b) f r]])))])))))
    
    
    (declare prop_collapse
      (fun (fun (integer) (integer))
        (fun [CraftOfFP.tree (integer)]
             Prelude.bool)))
    (define prop_collapse (lam f (lam t
      [(inst Prelude.equalsList (integer)) Prelude.equalsInteger
        [(inst (inst Prelude.map (integer)) (integer))
          f
          [(inst CraftOfFP.collapse (integer)) t]]
        [(inst CraftOfFP.collapse (integer))
          [(inst (inst CraftOfFP.mapTree (integer)) (integer)) f t]]])))
    
    
    (declare sizeT
      (forall a (type) (fun [CraftOfFP.tree a] (integer))))
    (define sizeT (abs a (lam t
      [(inst (inst CraftOfFP.caseTree a) (integer)) t
        (lam u 1)
        (lam x (lam l (lam r
          [Prelude.addInteger
            1
            [Prelude.addInteger
              [(inst CraftOfFP.sizeT a) l]
              [(inst CraftOfFP.sizeT a) r]]])))])))
    
    
    (declare leavesT
      (forall a (type) (fun [CraftOfFP.tree a] (integer))))
    (define leavesT (abs a (lam t
      [(inst (inst CraftOfFP.caseTree a) (integer)) t
        (lam u 1)
        (lam x (lam l (lam r
          [Prelude.addInteger [(inst CraftOfFP.leavesT a) l]
                              [(inst CraftOfFP.leavesT a) r]])))])))
    
    
    (declare prop_sizeT (fun [CraftOfFP.tree (integer)]
                             Prelude.bool))
    (define prop_sizeT (lam t
      [Prelude.equalsInteger
        [(inst CraftOfFP.sizeT (integer)) t]
        [Prelude.addInteger
          [(inst CraftOfFP.leavesT (integer)) t]
          [(inst Prelude.length (integer))
            [(inst CraftOfFP.collapse (integer)) t]]]]))
    
    
    (declare test_collapse_1 (fun Prelude.unit Prelude.bool))
    (define test_collapse_1 (lam x
      [CraftOfFP.prop_collapse
        [Prelude.addInteger 2]
        (inst CraftOfFP.nil (integer))]))
    
    (declare test_collapse_2 (fun Prelude.unit Prelude.bool))
    (define test_collapse_2 (lam x
      [CraftOfFP.prop_collapse
        [Prelude.addInteger 2]
        [(inst CraftOfFP.node (integer)) 0
          [(inst CraftOfFP.node (integer)) 13
            (inst CraftOfFP.nil (integer))
            (inst CraftOfFP.nil (integer))]
          [(inst CraftOfFP.node (integer)) 42
            (inst CraftOfFP.nil (integer))
            (inst CraftOfFP.nil (integer))]]]))
    
        (declare test_collapse_3 (fun Prelude.unit Prelude.bool))
    (define test_collapse_3 (lam x
      [CraftOfFP.prop_collapse
        [Prelude.multiplyInteger 2]
        (inst CraftOfFP.nil (integer))]))
    
    (declare test_collapse_4 (fun Prelude.unit Prelude.bool))
    (define test_collapse_4 (lam x
      [CraftOfFP.prop_collapse
        [Prelude.multiplyInteger 2]
        [(inst CraftOfFP.node (integer)) 0
          [(inst CraftOfFP.node (integer)) 13
            (inst CraftOfFP.nil (integer))
            (inst CraftOfFP.nil (integer))]
          [(inst CraftOfFP.node (integer)) 42
            (inst CraftOfFP.nil (integer))
            (inst CraftOfFP.nil (integer))]]]))
    
    (declare test_sizeT_1 (fun Prelude.unit Prelude.bool))
    (define test_sizeT_1 (lam x
      [CraftOfFP.prop_sizeT (inst CraftOfFP.nil (integer))]))
    
    (declare test_sizeT_2 (fun Prelude.unit Prelude.bool))
    (define test_sizeT_2 (lam x
      [CraftOfFP.prop_sizeT
        [(inst CraftOfFP.node (integer)) 0
          [(inst CraftOfFP.node (integer)) 13
            (inst CraftOfFP.nil (integer))
            (inst CraftOfFP.nil (integer))]
          [(inst CraftOfFP.node (integer)) 42
            (inst CraftOfFP.nil (integer))
            (inst CraftOfFP.nil (integer))]]]))
    
    
    
    
  )
)